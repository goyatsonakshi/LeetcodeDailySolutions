class Solution {
public:
    // Function to find the maximum number of vowels in any substring of length k
    int maxVowels(string s, int k) {
        int count = 0; // Initialize counter for vowels
        int maxVowelCount = 0; // This will store the maximum count of vowels found
        int strLength = s.size(); // Store the length of the string

        // Count the number of vowels in the first window of size k
        for (int i = 0; i < k; ++i)
            count += isVowel(s[i]); 
      
        maxVowelCount = count; // Initialize maximum vowel count to be the count from the first window

        // Slide the window by one position to the right each time and update counts
        for (int i = k; i < strLength; ++i) {
            count += isVowel(s[i]); // Add a vowel count for new character in the window
            count -= isVowel(s[i - k]); // Subtract a vowel count for the character that is no longer in the window
            maxVowelCount = max(maxVowelCount, count); // Update maximum count if current window has more vowels
        }

        return maxVowelCount; // Return the maximum number of vowels found in any substring of length k
    }

    // Helper function to check if a character is a vowel
    bool isVowel(char c) {
        // A character is a vowel if it is 'a', 'e', 'i', 'o', or 'u'
        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';
    }
};
