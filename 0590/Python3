class Node:
    def __init__(self, val=None, children=None):
        self.val = val
        self.children = children if children is not None else []


class Solution:
    def postorder(self, root: 'Node') -> list[int]:
        # List to store the postorder traversal result
        postorder_result = []

        # If the tree is empty, return an empty list
        if root is None:
            return postorder_result

        # Stack to keep track of nodes to visit
        stack = [root]

        # Continue processing nodes until stack is empty
        while stack:
            # Pop a node from the stack
            current_node = stack.pop()

            # Add the current node's value to the traversal result
            postorder_result.append(current_node.val)

            # Push all children of the current node to the stack
            # Note: We push children in the order as they are in the list so that they are processed
            # in reverse order when popped (because stack is LIFO), which is needed for postorder.
            for child in current_node.children:
                stack.append(child)

        # Return the result reversed, as we need to process children before their parent
        # This reverse operation gives us the correct order of postorder traversal
        return postorder_result[::-1]
