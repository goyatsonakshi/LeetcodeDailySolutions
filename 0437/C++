class Solution {
public:
    int pathSum(TreeNode* root, int targetSum) {
        unordered_map<long long, int> prefixSums;
        prefixSums[0] = 1;  // Base case: a sum of 0 occurs once
        return dfs(root, 0, targetSum, prefixSums);
    }
    
    int dfs(TreeNode* node, long long currentSum, int targetSum, unordered_map<long long, int>& prefixSums) {
        if (!node) return 0;
        
        currentSum += node->val;
        int pathCount = prefixSums[currentSum - targetSum];
        
        prefixSums[currentSum]++;
        
        pathCount += dfs(node->left, currentSum, targetSum, prefixSums);
        pathCount += dfs(node->right, currentSum, targetSum, prefixSums);
        
        prefixSums[currentSum]--;  // Remove the current node's contribution before backtracking
        
        return pathCount;
    }
};
