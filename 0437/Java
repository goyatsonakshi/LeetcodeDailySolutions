import java.util.HashMap;

class Solution {
    public int pathSum(TreeNode root, int targetSum) {
        HashMap<Long, Integer> prefixSums = new HashMap<>();
        prefixSums.put(0L, 1); // Base case: a sum of 0 occurs once
        return dfs(root, 0, targetSum, prefixSums);
    }
    
    private int dfs(TreeNode node, long currentSum, int targetSum, HashMap<Long, Integer> prefixSums) {
        if (node == null) return 0;
        
        currentSum += node.val;
        int pathCount = prefixSums.getOrDefault(currentSum - targetSum, 0);
        
        prefixSums.put(currentSum, prefixSums.getOrDefault(currentSum, 0) + 1);
        
        pathCount += dfs(node.left, currentSum, targetSum, prefixSums);
        pathCount += dfs(node.right, currentSum, targetSum, prefixSums);
        
        prefixSums.put(currentSum, prefixSums.get(currentSum) - 1); // Remove the current node's contribution
        
        return pathCount;
    }
}
